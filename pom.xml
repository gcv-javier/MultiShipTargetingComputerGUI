<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.mstc</groupId>
    <artifactId>mstc</artifactId>
    <version>0.1.0</version>
    <packaging>jar</packaging>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>31.0.1-jre</version>
        </dependency>
        <!--   Unit tests     -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.8.2</version>
            <scope>test</scope>
        </dependency>
        <!--   Apache Common Maths     -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-math3</artifactId>
            <version>3.5</version>
        </dependency>
        <!--  Intellij Layout Manager     -->
        <dependency>
            <groupId>com.intellij</groupId>
            <artifactId>forms_rt</artifactId>
            <version>7.0.3</version>
        </dependency>

        <!-- TODO  make core package a dependency, then we can reuse it in an Android app, for example   -->
    </dependencies>

    <build>
        <plugins>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>17</source>
                    <target>17</target>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>

            <!--   The Shade plugin assembles all dependencies into a runnable jar â€“ the transformer adds the Main-Class header to the MANIFEST.MF.   -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>1.7.1</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <shadedArtifactAttached>true</shadedArtifactAttached>
                    <shadedClassifierName>shaded</shadedClassifierName>
                    <transformers>
                        <transformer
                                implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                            <mainClass>com.mstc.Main</mainClass>
                        </transformer>
                    </transformers>
                </configuration>
            </plugin>

            <!-- Wraps the project installer jar into an .exe -->
            <plugin>
                <groupId>com.akathist.maven.plugins.launch4j</groupId>
                <artifactId>launch4j-maven-plugin</artifactId>
                <version>2.1.2</version>
                <executions>
                    <execution>
                        <id>jar-to-exe</id>
                        <phase>package</phase>
                        <goals>
                            <goal>launch4j</goal>
                        </goals>
                        <configuration>
                            <downloadUrl>https://www.oracle.com/java/technologies/downloads/#jdk17-windows</downloadUrl>
                            <icon>${project.basedir}/src/main/resources/logo/ui_icon.ico</icon>

                            <headerType>gui</headerType>
                            <stayAlive>true</stayAlive>
                            <jar>${project.build.directory}/${project.build.finalName}-shaded.jar</jar>
                            <outfile>${project.build.directory}/${project.build.finalName}.exe</outfile>
                            <manifest>${project.basedir}/src/main/resources/${project.artifactId}.manifest</manifest>
                            <classPath>
                                <!-- The main class to invoke on executing the .exe -->
                                <mainClass>com.mstc.Main</mainClass>
                                <preCp>anything</preCp>
                            </classPath>
                            <jre>
                                <minVersion>1.17.0</minVersion>
                                <jdkPreference>preferJre</jdkPreference>

                                <!-- Relative path to the JRE in the final zip bundle, to launch the exe/jar-->
                                <path>./lib/jre</path>

                                <!-- Runtime arguments -->
                                <opts>
                                    <!-- Run time arguments can be passed using <opt> as below -->
                                    <!--<opt>-Dparam=value</opt>-->
                                </opts>

                            </jre>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Bundles the .exe and JRE in a zip file -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>3.3.0</version>
                <executions>
                    <execution>
                        <!-- Bundle the .exe and jre into a final release zip -->
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                        <configuration>
                            <appendAssemblyId>false</appendAssemblyId>
                            <descriptors>
                                <!-- Defines the files that need to be bundled in the final zip-->
                                <descriptor>${project.basedir}/src/main/resources/assembly.xml</descriptor>
                            </descriptors>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--  Including my system JDK makes the zip quite big, so we use an open java SDK called zulu   -->
            <!--  it downloads zulu openjdk jre 17 from the url, and puts it in the target folder of the project  -->
            <plugin>
                <groupId>com.googlecode.maven-download-plugin</groupId>
                <artifactId>download-maven-plugin</artifactId>
                <version>1.6.8</version>
                <executions>
                    <execution>
                        <id>download-jre</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>wget</goal>
                        </goals>
                        <configuration>
                            <url>
                                https://cdn.azul.com/zulu/bin/zulu17.32.13-ca-jre17.0.2-win_x64.zip
                            </url>
                            <outputDirectory>${project.build.directory}</outputDirectory>
                            <sha256>a8f31891c563890c65ac20ff52906f16891a62d7bb497e389964153205cfd588</sha256>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--   the maven-antrun-plugin to unpack the jre zip  -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>3.0.0</version>
                <executions>
                    <execution>
                        <id>unpack-jre</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <unzip src="${project.build.directory}/zulu17.32.13-ca-jre17.0.2-win_x64.zip"
                                       dest="${project.build.directory}"/>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--   TODO, avoid getting a jar that is not necessary, leaving only the useful fat jar (with dependencies in it)    -->
            <!--   Stop the creation of the #2nd jar without the dependencies   -->
            <!--            <plugin>-->
            <!--                <artifactId>maven-jar-plugin</artifactId>-->
            <!--                <executions>-->
            <!--                    <execution>-->
            <!--                        <id>default-jar</id>-->
            <!--                        <phase>none</phase>-->
            <!--                    </execution>-->
            <!--                </executions>-->
            <!--            </plugin>-->

        </plugins>
    </build>
</project>